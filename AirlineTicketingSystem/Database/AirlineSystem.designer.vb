'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AirlineSystem")>  _
Partial Public Class AirlineSystemDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBooking(instance As Booking)
    End Sub
  Partial Private Sub UpdateBooking(instance As Booking)
    End Sub
  Partial Private Sub DeleteBooking(instance As Booking)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertCity(instance As City)
    End Sub
  Partial Private Sub UpdateCity(instance As City)
    End Sub
  Partial Private Sub DeleteCity(instance As City)
    End Sub
  Partial Private Sub InsertFlight(instance As Flight)
    End Sub
  Partial Private Sub UpdateFlight(instance As Flight)
    End Sub
  Partial Private Sub DeleteFlight(instance As Flight)
    End Sub
  Partial Private Sub InsertPlane(instance As Plane)
    End Sub
  Partial Private Sub UpdatePlane(instance As Plane)
    End Sub
  Partial Private Sub DeletePlane(instance As Plane)
    End Sub
  Partial Private Sub InsertRoute(instance As Route)
    End Sub
  Partial Private Sub UpdateRoute(instance As Route)
    End Sub
  Partial Private Sub DeleteRoute(instance As Route)
    End Sub
  Partial Private Sub InsertStop(instance As [Stop])
    End Sub
  Partial Private Sub UpdateStop(instance As [Stop])
    End Sub
  Partial Private Sub DeleteStop(instance As [Stop])
    End Sub
  Partial Private Sub InsertTicket(instance As Ticket)
    End Sub
  Partial Private Sub UpdateTicket(instance As Ticket)
    End Sub
  Partial Private Sub DeleteTicket(instance As Ticket)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AirlineTicketingSystem.My.MySettings.Default.AirlineSystemConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Bookings() As System.Data.Linq.Table(Of Booking)
		Get
			Return Me.GetTable(Of Booking)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Cities() As System.Data.Linq.Table(Of City)
		Get
			Return Me.GetTable(Of City)
		End Get
	End Property
	
	Public ReadOnly Property Flights() As System.Data.Linq.Table(Of Flight)
		Get
			Return Me.GetTable(Of Flight)
		End Get
	End Property
	
	Public ReadOnly Property Planes() As System.Data.Linq.Table(Of Plane)
		Get
			Return Me.GetTable(Of Plane)
		End Get
	End Property
	
	Public ReadOnly Property Routes() As System.Data.Linq.Table(Of Route)
		Get
			Return Me.GetTable(Of Route)
		End Get
	End Property
	
	Public ReadOnly Property Stops() As System.Data.Linq.Table(Of [Stop])
		Get
			Return Me.GetTable(Of [Stop])
		End Get
	End Property
	
	Public ReadOnly Property Tickets() As System.Data.Linq.Table(Of Ticket)
		Get
			Return Me.GetTable(Of Ticket)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Booking")>  _
Partial Public Class Booking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookingID As String
	
	Private _UserID As String
	
	Private _FlightID As String
	
	Private _NoOfPassengers As Integer
	
	Private _TotalPrice As Decimal
	
	Private _PaymentDate As Date
	
	Private _CreditCardNo As String
	
	Private _IsCancelled As Boolean
	
	Private _ExtraBaggageKG As Integer
	
	Private _Tickets As EntitySet(Of Ticket)
	
	Private _User As EntityRef(Of User)
	
	Private _Flight As EntityRef(Of Flight)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookingIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookingIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnFlightIDChanging(value As String)
    End Sub
    Partial Private Sub OnFlightIDChanged()
    End Sub
    Partial Private Sub OnNoOfPassengersChanging(value As Integer)
    End Sub
    Partial Private Sub OnNoOfPassengersChanged()
    End Sub
    Partial Private Sub OnTotalPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalPriceChanged()
    End Sub
    Partial Private Sub OnPaymentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnPaymentDateChanged()
    End Sub
    Partial Private Sub OnCreditCardNoChanging(value As String)
    End Sub
    Partial Private Sub OnCreditCardNoChanged()
    End Sub
    Partial Private Sub OnIsCancelledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsCancelledChanged()
    End Sub
    Partial Private Sub OnExtraBaggageKGChanging(value As Integer)
    End Sub
    Partial Private Sub OnExtraBaggageKGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tickets = New EntitySet(Of Ticket)(AddressOf Me.attach_Tickets, AddressOf Me.detach_Tickets)
		Me._User = CType(Nothing, EntityRef(Of User))
		Me._Flight = CType(Nothing, EntityRef(Of Flight))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BookingID() As String
		Get
			Return Me._BookingID
		End Get
		Set
			If (String.Equals(Me._BookingID, value) = false) Then
				Me.OnBookingIDChanging(value)
				Me.SendPropertyChanging
				Me._BookingID = value
				Me.SendPropertyChanged("BookingID")
				Me.OnBookingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="VarChar(10)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightID", DbType:="VarChar(10)")>  _
	Public Property FlightID() As String
		Get
			Return Me._FlightID
		End Get
		Set
			If (String.Equals(Me._FlightID, value) = false) Then
				If Me._Flight.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlightIDChanging(value)
				Me.SendPropertyChanging
				Me._FlightID = value
				Me.SendPropertyChanged("FlightID")
				Me.OnFlightIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOfPassengers", DbType:="Int NOT NULL")>  _
	Public Property NoOfPassengers() As Integer
		Get
			Return Me._NoOfPassengers
		End Get
		Set
			If ((Me._NoOfPassengers = value)  _
						= false) Then
				Me.OnNoOfPassengersChanging(value)
				Me.SendPropertyChanging
				Me._NoOfPassengers = value
				Me.SendPropertyChanged("NoOfPassengers")
				Me.OnNoOfPassengersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalPrice", DbType:="Decimal(8,2) NOT NULL")>  _
	Public Property TotalPrice() As Decimal
		Get
			Return Me._TotalPrice
		End Get
		Set
			If ((Me._TotalPrice = value)  _
						= false) Then
				Me.OnTotalPriceChanging(value)
				Me.SendPropertyChanging
				Me._TotalPrice = value
				Me.SendPropertyChanged("TotalPrice")
				Me.OnTotalPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentDate", DbType:="DateTime NOT NULL")>  _
	Public Property PaymentDate() As Date
		Get
			Return Me._PaymentDate
		End Get
		Set
			If ((Me._PaymentDate = value)  _
						= false) Then
				Me.OnPaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._PaymentDate = value
				Me.SendPropertyChanged("PaymentDate")
				Me.OnPaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditCardNo", DbType:="VarChar(20)")>  _
	Public Property CreditCardNo() As String
		Get
			Return Me._CreditCardNo
		End Get
		Set
			If (String.Equals(Me._CreditCardNo, value) = false) Then
				Me.OnCreditCardNoChanging(value)
				Me.SendPropertyChanging
				Me._CreditCardNo = value
				Me.SendPropertyChanged("CreditCardNo")
				Me.OnCreditCardNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCancelled", DbType:="Bit NOT NULL")>  _
	Public Property IsCancelled() As Boolean
		Get
			Return Me._IsCancelled
		End Get
		Set
			If ((Me._IsCancelled = value)  _
						= false) Then
				Me.OnIsCancelledChanging(value)
				Me.SendPropertyChanging
				Me._IsCancelled = value
				Me.SendPropertyChanged("IsCancelled")
				Me.OnIsCancelledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtraBaggageKG", DbType:="Int NOT NULL")>  _
	Public Property ExtraBaggageKG() As Integer
		Get
			Return Me._ExtraBaggageKG
		End Get
		Set
			If ((Me._ExtraBaggageKG = value)  _
						= false) Then
				Me.OnExtraBaggageKGChanging(value)
				Me.SendPropertyChanging
				Me._ExtraBaggageKG = value
				Me.SendPropertyChanged("ExtraBaggageKG")
				Me.OnExtraBaggageKGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Booking_Ticket", Storage:="_Tickets", ThisKey:="BookingID", OtherKey:="BookingID")>  _
	Public Property Tickets() As EntitySet(Of Ticket)
		Get
			Return Me._Tickets
		End Get
		Set
			Me._Tickets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Booking", Storage:="_User", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Bookings.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings.Add(Me)
					Me._UserID = value.UserID
				Else
					Me._UserID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Flight_Booking", Storage:="_Flight", ThisKey:="FlightID", OtherKey:="FlightID", IsForeignKey:=true)>  _
	Public Property Flight() As Flight
		Get
			Return Me._Flight.Entity
		End Get
		Set
			Dim previousValue As Flight = Me._Flight.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Flight.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Flight.Entity = Nothing
					previousValue.Bookings.Remove(Me)
				End If
				Me._Flight.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings.Add(Me)
					Me._FlightID = value.FlightID
				Else
					Me._FlightID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Flight")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tickets(ByVal entity As Ticket)
		Me.SendPropertyChanging
		entity.Booking = Me
	End Sub
	
	Private Sub detach_Tickets(ByVal entity As Ticket)
		Me.SendPropertyChanging
		entity.Booking = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As String
	
	Private _Name As String
	
	Private _Password As String
	
	Private _PasswordSalt As String
	
	Private _Gender As System.Nullable(Of Char)
	
	Private _Email As String
	
	Private _IsRegistered As Boolean
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _PhoneNo As String
	
	Private _CreditCardNo As String
	
	Private _Country As String
	
	Private _City As String
	
	Private _IsStaff As Boolean
	
	Private _Bookings As EntitySet(Of Booking)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnIsRegisteredChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsRegisteredChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnCreditCardNoChanging(value As String)
    End Sub
    Partial Private Sub OnCreditCardNoChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnIsStaffChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsStaffChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(100)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="VarChar(100)")>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="Char(1)")>  _
	Public Property Gender() As System.Nullable(Of Char)
		Get
			Return Me._Gender
		End Get
		Set
			If (Me._Gender.Equals(value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(35) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRegistered", DbType:="Bit NOT NULL")>  _
	Public Property IsRegistered() As Boolean
		Get
			Return Me._IsRegistered
		End Get
		Set
			If ((Me._IsRegistered = value)  _
						= false) Then
				Me.OnIsRegisteredChanging(value)
				Me.SendPropertyChanging
				Me._IsRegistered = value
				Me.SendPropertyChanged("IsRegistered")
				Me.OnIsRegisteredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="VarChar(12)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditCardNo", DbType:="VarChar(20)")>  _
	Public Property CreditCardNo() As String
		Get
			Return Me._CreditCardNo
		End Get
		Set
			If (String.Equals(Me._CreditCardNo, value) = false) Then
				Me.OnCreditCardNoChanging(value)
				Me.SendPropertyChanging
				Me._CreditCardNo = value
				Me.SendPropertyChanged("CreditCardNo")
				Me.OnCreditCardNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="VarChar(35)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(25)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsStaff", DbType:="Bit NOT NULL")>  _
	Public Property IsStaff() As Boolean
		Get
			Return Me._IsStaff
		End Get
		Set
			If ((Me._IsStaff = value)  _
						= false) Then
				Me.OnIsStaffChanging(value)
				Me.SendPropertyChanging
				Me._IsStaff = value
				Me.SendPropertyChanged("IsStaff")
				Me.OnIsStaffChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Booking", Storage:="_Bookings", ThisKey:="UserID", OtherKey:="UserID")>  _
	Public Property Bookings() As EntitySet(Of Booking)
		Get
			Return Me._Bookings
		End Get
		Set
			Me._Bookings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.City")>  _
Partial Public Class City
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CityID As String
	
	Private _Name As String
	
	Private _Country As String
	
	Private _State As String
	
	Private _Longitude As String
	
	Private _Latitude As String
	
	Private _Stops As EntitySet(Of [Stop])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCityIDChanging(value As String)
    End Sub
    Partial Private Sub OnCityIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Stops = New EntitySet(Of [Stop])(AddressOf Me.attach_Stops, AddressOf Me.detach_Stops)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CityID() As String
		Get
			Return Me._CityID
		End Get
		Set
			If (String.Equals(Me._CityID, value) = false) Then
				Me.OnCityIDChanging(value)
				Me.SendPropertyChanging
				Me._CityID = value
				Me.SendPropertyChanged("CityID")
				Me.OnCityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="VarChar(35) NOT NULL", CanBeNull:=false)>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me.OnLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._Latitude = value
				Me.SendPropertyChanged("Latitude")
				Me.OnLatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Stop", Storage:="_Stops", ThisKey:="CityID", OtherKey:="CityID")>  _
	Public Property Stops() As EntitySet(Of [Stop])
		Get
			Return Me._Stops
		End Get
		Set
			Me._Stops.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Stops(ByVal entity As [Stop])
		Me.SendPropertyChanging
		entity.City = Me
	End Sub
	
	Private Sub detach_Stops(ByVal entity As [Stop])
		Me.SendPropertyChanging
		entity.City = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Flight")>  _
Partial Public Class Flight
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlightID As String
	
	Private _RouteID As String
	
	Private _PlaneID As String
	
	Private _FlightNo As String
	
	Private _DepartureTime As Date
	
	Private _ArrivalTime As Date
	
	Private _Price As Decimal
	
	Private _IsDaily As Boolean
	
	Private _IsFlightInstance As Boolean
	
	Private _Bookings As EntitySet(Of Booking)
	
	Private _Plane As EntityRef(Of Plane)
	
	Private _Route As EntityRef(Of Route)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlightIDChanging(value As String)
    End Sub
    Partial Private Sub OnFlightIDChanged()
    End Sub
    Partial Private Sub OnRouteIDChanging(value As String)
    End Sub
    Partial Private Sub OnRouteIDChanged()
    End Sub
    Partial Private Sub OnPlaneIDChanging(value As String)
    End Sub
    Partial Private Sub OnPlaneIDChanged()
    End Sub
    Partial Private Sub OnFlightNoChanging(value As String)
    End Sub
    Partial Private Sub OnFlightNoChanged()
    End Sub
    Partial Private Sub OnDepartureTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnDepartureTimeChanged()
    End Sub
    Partial Private Sub OnArrivalTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnArrivalTimeChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnIsDailyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDailyChanged()
    End Sub
    Partial Private Sub OnIsFlightInstanceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsFlightInstanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
		Me._Plane = CType(Nothing, EntityRef(Of Plane))
		Me._Route = CType(Nothing, EntityRef(Of Route))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FlightID() As String
		Get
			Return Me._FlightID
		End Get
		Set
			If (String.Equals(Me._FlightID, value) = false) Then
				Me.OnFlightIDChanging(value)
				Me.SendPropertyChanging
				Me._FlightID = value
				Me.SendPropertyChanged("FlightID")
				Me.OnFlightIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RouteID", DbType:="VarChar(10)")>  _
	Public Property RouteID() As String
		Get
			Return Me._RouteID
		End Get
		Set
			If (String.Equals(Me._RouteID, value) = false) Then
				If Me._Route.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRouteIDChanging(value)
				Me.SendPropertyChanging
				Me._RouteID = value
				Me.SendPropertyChanged("RouteID")
				Me.OnRouteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlaneID", DbType:="VarChar(10)")>  _
	Public Property PlaneID() As String
		Get
			Return Me._PlaneID
		End Get
		Set
			If (String.Equals(Me._PlaneID, value) = false) Then
				If Me._Plane.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlaneIDChanging(value)
				Me.SendPropertyChanging
				Me._PlaneID = value
				Me.SendPropertyChanged("PlaneID")
				Me.OnPlaneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightNo", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property FlightNo() As String
		Get
			Return Me._FlightNo
		End Get
		Set
			If (String.Equals(Me._FlightNo, value) = false) Then
				Me.OnFlightNoChanging(value)
				Me.SendPropertyChanging
				Me._FlightNo = value
				Me.SendPropertyChanged("FlightNo")
				Me.OnFlightNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartureTime", DbType:="DateTime NOT NULL")>  _
	Public Property DepartureTime() As Date
		Get
			Return Me._DepartureTime
		End Get
		Set
			If ((Me._DepartureTime = value)  _
						= false) Then
				Me.OnDepartureTimeChanging(value)
				Me.SendPropertyChanging
				Me._DepartureTime = value
				Me.SendPropertyChanged("DepartureTime")
				Me.OnDepartureTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime NOT NULL")>  _
	Public Property ArrivalTime() As Date
		Get
			Return Me._ArrivalTime
		End Get
		Set
			If ((Me._ArrivalTime = value)  _
						= false) Then
				Me.OnArrivalTimeChanging(value)
				Me.SendPropertyChanging
				Me._ArrivalTime = value
				Me.SendPropertyChanged("ArrivalTime")
				Me.OnArrivalTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(7,2) NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDaily", DbType:="Bit NOT NULL")>  _
	Public Property IsDaily() As Boolean
		Get
			Return Me._IsDaily
		End Get
		Set
			If ((Me._IsDaily = value)  _
						= false) Then
				Me.OnIsDailyChanging(value)
				Me.SendPropertyChanging
				Me._IsDaily = value
				Me.SendPropertyChanged("IsDaily")
				Me.OnIsDailyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFlightInstance", DbType:="Bit NOT NULL")>  _
	Public Property IsFlightInstance() As Boolean
		Get
			Return Me._IsFlightInstance
		End Get
		Set
			If ((Me._IsFlightInstance = value)  _
						= false) Then
				Me.OnIsFlightInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IsFlightInstance = value
				Me.SendPropertyChanged("IsFlightInstance")
				Me.OnIsFlightInstanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Flight_Booking", Storage:="_Bookings", ThisKey:="FlightID", OtherKey:="FlightID")>  _
	Public Property Bookings() As EntitySet(Of Booking)
		Get
			Return Me._Bookings
		End Get
		Set
			Me._Bookings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plane_Flight", Storage:="_Plane", ThisKey:="PlaneID", OtherKey:="PlaneID", IsForeignKey:=true)>  _
	Public Property Plane() As Plane
		Get
			Return Me._Plane.Entity
		End Get
		Set
			Dim previousValue As Plane = Me._Plane.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plane.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plane.Entity = Nothing
					previousValue.Flights.Remove(Me)
				End If
				Me._Plane.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Flights.Add(Me)
					Me._PlaneID = value.PlaneID
				Else
					Me._PlaneID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Plane")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Route_Flight", Storage:="_Route", ThisKey:="RouteID", OtherKey:="RouteID", IsForeignKey:=true)>  _
	Public Property Route() As Route
		Get
			Return Me._Route.Entity
		End Get
		Set
			Dim previousValue As Route = Me._Route.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Route.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Route.Entity = Nothing
					previousValue.Flights.Remove(Me)
				End If
				Me._Route.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Flights.Add(Me)
					Me._RouteID = value.RouteID
				Else
					Me._RouteID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Route")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Flight = Me
	End Sub
	
	Private Sub detach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.Flight = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Plane")>  _
Partial Public Class Plane
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PlaneID As String
	
	Private _Model As String
	
	Private _Manufacturer As String
	
	Private _Capacity As Integer
	
	Private _Flights As EntitySet(Of Flight)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPlaneIDChanging(value As String)
    End Sub
    Partial Private Sub OnPlaneIDChanged()
    End Sub
    Partial Private Sub OnModelChanging(value As String)
    End Sub
    Partial Private Sub OnModelChanged()
    End Sub
    Partial Private Sub OnManufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerChanged()
    End Sub
    Partial Private Sub OnCapacityChanging(value As Integer)
    End Sub
    Partial Private Sub OnCapacityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Flights = New EntitySet(Of Flight)(AddressOf Me.attach_Flights, AddressOf Me.detach_Flights)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlaneID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PlaneID() As String
		Get
			Return Me._PlaneID
		End Get
		Set
			If (String.Equals(Me._PlaneID, value) = false) Then
				Me.OnPlaneIDChanging(value)
				Me.SendPropertyChanging
				Me._PlaneID = value
				Me.SendPropertyChanged("PlaneID")
				Me.OnPlaneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Model() As String
		Get
			Return Me._Model
		End Get
		Set
			If (String.Equals(Me._Model, value) = false) Then
				Me.OnModelChanging(value)
				Me.SendPropertyChanging
				Me._Model = value
				Me.SendPropertyChanged("Model")
				Me.OnModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturer", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me.OnManufacturerChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturer = value
				Me.SendPropertyChanged("Manufacturer")
				Me.OnManufacturerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Capacity", DbType:="Int NOT NULL")>  _
	Public Property Capacity() As Integer
		Get
			Return Me._Capacity
		End Get
		Set
			If ((Me._Capacity = value)  _
						= false) Then
				Me.OnCapacityChanging(value)
				Me.SendPropertyChanging
				Me._Capacity = value
				Me.SendPropertyChanged("Capacity")
				Me.OnCapacityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plane_Flight", Storage:="_Flights", ThisKey:="PlaneID", OtherKey:="PlaneID")>  _
	Public Property Flights() As EntitySet(Of Flight)
		Get
			Return Me._Flights
		End Get
		Set
			Me._Flights.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Flights(ByVal entity As Flight)
		Me.SendPropertyChanging
		entity.Plane = Me
	End Sub
	
	Private Sub detach_Flights(ByVal entity As Flight)
		Me.SendPropertyChanging
		entity.Plane = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Route")>  _
Partial Public Class Route
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RouteID As String
	
	Private _DurationHour As Integer
	
	Private _DurationMins As Integer
	
	Private _Flights As EntitySet(Of Flight)
	
	Private _Stops As EntitySet(Of [Stop])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRouteIDChanging(value As String)
    End Sub
    Partial Private Sub OnRouteIDChanged()
    End Sub
    Partial Private Sub OnDurationHourChanging(value As Integer)
    End Sub
    Partial Private Sub OnDurationHourChanged()
    End Sub
    Partial Private Sub OnDurationMinsChanging(value As Integer)
    End Sub
    Partial Private Sub OnDurationMinsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Flights = New EntitySet(Of Flight)(AddressOf Me.attach_Flights, AddressOf Me.detach_Flights)
		Me._Stops = New EntitySet(Of [Stop])(AddressOf Me.attach_Stops, AddressOf Me.detach_Stops)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RouteID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RouteID() As String
		Get
			Return Me._RouteID
		End Get
		Set
			If (String.Equals(Me._RouteID, value) = false) Then
				Me.OnRouteIDChanging(value)
				Me.SendPropertyChanging
				Me._RouteID = value
				Me.SendPropertyChanged("RouteID")
				Me.OnRouteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DurationHour", DbType:="Int NOT NULL")>  _
	Public Property DurationHour() As Integer
		Get
			Return Me._DurationHour
		End Get
		Set
			If ((Me._DurationHour = value)  _
						= false) Then
				Me.OnDurationHourChanging(value)
				Me.SendPropertyChanging
				Me._DurationHour = value
				Me.SendPropertyChanged("DurationHour")
				Me.OnDurationHourChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DurationMins", DbType:="Int NOT NULL")>  _
	Public Property DurationMins() As Integer
		Get
			Return Me._DurationMins
		End Get
		Set
			If ((Me._DurationMins = value)  _
						= false) Then
				Me.OnDurationMinsChanging(value)
				Me.SendPropertyChanging
				Me._DurationMins = value
				Me.SendPropertyChanged("DurationMins")
				Me.OnDurationMinsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Route_Flight", Storage:="_Flights", ThisKey:="RouteID", OtherKey:="RouteID")>  _
	Public Property Flights() As EntitySet(Of Flight)
		Get
			Return Me._Flights
		End Get
		Set
			Me._Flights.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Route_Stop", Storage:="_Stops", ThisKey:="RouteID", OtherKey:="RouteID")>  _
	Public Property Stops() As EntitySet(Of [Stop])
		Get
			Return Me._Stops
		End Get
		Set
			Me._Stops.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Flights(ByVal entity As Flight)
		Me.SendPropertyChanging
		entity.Route = Me
	End Sub
	
	Private Sub detach_Flights(ByVal entity As Flight)
		Me.SendPropertyChanging
		entity.Route = Nothing
	End Sub
	
	Private Sub attach_Stops(ByVal entity As [Stop])
		Me.SendPropertyChanging
		entity.Route = Me
	End Sub
	
	Private Sub detach_Stops(ByVal entity As [Stop])
		Me.SendPropertyChanging
		entity.Route = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Stop")>  _
Partial Public Class [Stop]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RouteID As String
	
	Private _CityID As String
	
	Private _IsOrigin As Boolean
	
	Private _City As EntityRef(Of City)
	
	Private _Route As EntityRef(Of Route)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRouteIDChanging(value As String)
    End Sub
    Partial Private Sub OnRouteIDChanged()
    End Sub
    Partial Private Sub OnCityIDChanging(value As String)
    End Sub
    Partial Private Sub OnCityIDChanged()
    End Sub
    Partial Private Sub OnIsOriginChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsOriginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._City = CType(Nothing, EntityRef(Of City))
		Me._Route = CType(Nothing, EntityRef(Of Route))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RouteID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RouteID() As String
		Get
			Return Me._RouteID
		End Get
		Set
			If (String.Equals(Me._RouteID, value) = false) Then
				If Me._Route.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRouteIDChanging(value)
				Me.SendPropertyChanging
				Me._RouteID = value
				Me.SendPropertyChanged("RouteID")
				Me.OnRouteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CityID() As String
		Get
			Return Me._CityID
		End Get
		Set
			If (String.Equals(Me._CityID, value) = false) Then
				If Me._City.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCityIDChanging(value)
				Me.SendPropertyChanging
				Me._CityID = value
				Me.SendPropertyChanged("CityID")
				Me.OnCityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOrigin", DbType:="Bit NOT NULL")>  _
	Public Property IsOrigin() As Boolean
		Get
			Return Me._IsOrigin
		End Get
		Set
			If ((Me._IsOrigin = value)  _
						= false) Then
				Me.OnIsOriginChanging(value)
				Me.SendPropertyChanging
				Me._IsOrigin = value
				Me.SendPropertyChanged("IsOrigin")
				Me.OnIsOriginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Stop", Storage:="_City", ThisKey:="CityID", OtherKey:="CityID", IsForeignKey:=true)>  _
	Public Property City() As City
		Get
			Return Me._City.Entity
		End Get
		Set
			Dim previousValue As City = Me._City.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._City.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._City.Entity = Nothing
					previousValue.Stops.Remove(Me)
				End If
				Me._City.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Stops.Add(Me)
					Me._CityID = value.CityID
				Else
					Me._CityID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("City")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Route_Stop", Storage:="_Route", ThisKey:="RouteID", OtherKey:="RouteID", IsForeignKey:=true)>  _
	Public Property Route() As Route
		Get
			Return Me._Route.Entity
		End Get
		Set
			Dim previousValue As Route = Me._Route.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Route.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Route.Entity = Nothing
					previousValue.Stops.Remove(Me)
				End If
				Me._Route.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Stops.Add(Me)
					Me._RouteID = value.RouteID
				Else
					Me._RouteID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Route")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ticket")>  _
Partial Public Class Ticket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TicketID As String
	
	Private _BookingID As String
	
	Private _Name As String
	
	Private _Seat As String
	
	Private _Booking As EntityRef(Of Booking)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTicketIDChanging(value As String)
    End Sub
    Partial Private Sub OnTicketIDChanged()
    End Sub
    Partial Private Sub OnBookingIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookingIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSeatChanging(value As String)
    End Sub
    Partial Private Sub OnSeatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Booking = CType(Nothing, EntityRef(Of Booking))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TicketID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property TicketID() As String
		Get
			Return Me._TicketID
		End Get
		Set
			If (String.Equals(Me._TicketID, value) = false) Then
				Me.OnTicketIDChanging(value)
				Me.SendPropertyChanging
				Me._TicketID = value
				Me.SendPropertyChanged("TicketID")
				Me.OnTicketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingID", DbType:="VarChar(10)")>  _
	Public Property BookingID() As String
		Get
			Return Me._BookingID
		End Get
		Set
			If (String.Equals(Me._BookingID, value) = false) Then
				If Me._Booking.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookingIDChanging(value)
				Me.SendPropertyChanging
				Me._BookingID = value
				Me.SendPropertyChanged("BookingID")
				Me.OnBookingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seat", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property Seat() As String
		Get
			Return Me._Seat
		End Get
		Set
			If (String.Equals(Me._Seat, value) = false) Then
				Me.OnSeatChanging(value)
				Me.SendPropertyChanging
				Me._Seat = value
				Me.SendPropertyChanged("Seat")
				Me.OnSeatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Booking_Ticket", Storage:="_Booking", ThisKey:="BookingID", OtherKey:="BookingID", IsForeignKey:=true)>  _
	Public Property Booking() As Booking
		Get
			Return Me._Booking.Entity
		End Get
		Set
			Dim previousValue As Booking = Me._Booking.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Booking.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Booking.Entity = Nothing
					previousValue.Tickets.Remove(Me)
				End If
				Me._Booking.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tickets.Add(Me)
					Me._BookingID = value.BookingID
				Else
					Me._BookingID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Booking")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
